{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAM,CACVC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,yBAoCtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA7CPT,EAAIC,KAAKgB,iBAAiB,UAE1B,SAAsBC,GACpBA,EAAEC,iBAEF,IAAIC,EAAQC,OAAOrB,EAAII,WAAWkB,OAC5BC,EAAOF,OAAOrB,EAAIK,UAAUiB,OAC5BE,EAASH,OAAOrB,EAAIM,YAAYgB,OAEtC,GAAIF,EAAQ,GAAKG,EAAO,GAAKC,GAAU,EACrC1B,EAAA2B,OAAOC,QACJ,oHAGH,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQG,IAC1BpB,EAAcoB,EAAE,EAAGP,GAChBQ,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBX,EAAA2B,OAAOK,QACL,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAGjDuB,OAAM,SAAAH,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBX,EAAA2B,OAAOQ,QACL,sBAAqCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAG/CW,GAASG,EAIfL,EAAEgB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport 'notiflix/dist/notiflix-3.2.6.min.css';\n\nconst obj = {\n  form: document.querySelector('.form'),\n  inputDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStep: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n};\n\nobj.form.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n\n  let delay = Number(obj.inputDelay.value);\n  const step = Number(obj.inputStep.value);\n  const amount = Number(obj.inputAmount.value);\n\n  if (delay < 0 || step < 0 || amount <= 0) {\n    Notify.warning(\n      `❗ The 'first delay' and the 'delay step' must be a positive number, and the 'amount' must be greater than 0`\n    );\n  } else {\n    for (let i = 0; i < amount; i++) {\n      createPromise(i+1, delay)\n        .then(({ position, delay }) => {\n          Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n        delay += step;\n    }\n  }\n\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$obj","form","document","querySelector","inputDelay","inputStep","inputAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","step","amount","Notify","warning","i","then","param","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.709061ed.js.map"}